/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : PpgLdd1.h
**     Project     : ProcessorExpert
**     Processor   : MKL25Z128VLK4
**     Component   : PPG_LDD
**     Version     : Component 01.014, Driver 01.03, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2015-05-26, 09:40, # CodeGen: 70
**     Abstract    :
**          This component implements a programmable pulse generator that
**          generates signal with variable duty and variable cycle (period).
**     Settings    :
**          Component name                                 : PpgLdd1
**          Module name                                    : TPM1
**          Counter                                        : TPM1_CNT
**          Period device                                  : TPM1_MOD
**          Duty device                                    : TPM1_C0V
**          Output pin                                     : ADC0_SE8/TSI0_CH0/PTB0/LLWU_P5/I2C0_SCL/TPM1_CH0
**          Output pin signal                              : 
**          Interrupt service/event                        : Disabled
**          Period                                         : 50 Hz
**          Starting pulse width                           : 1 ms
**          Initial polarity                               : low
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : yes
**            Event mask                                   : 
**              OnEnd                                      : Disabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init         - LDD_TDeviceData* PpgLdd1_Init(LDD_TUserData *UserDataPtr);
**         SelectPeriod - LDD_TError PpgLdd1_SelectPeriod(LDD_TDeviceData *DeviceDataPtr,...
**         SetRatio16   - LDD_TError PpgLdd1_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Ratio);
**         SetDutyUS    - LDD_TError PpgLdd1_SetDutyUS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time);
**         SetDutyMS    - LDD_TError PpgLdd1_SetDutyMS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time);
**
**     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
**     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file PpgLdd1.h
** @version 01.03
** @brief
**          This component implements a programmable pulse generator that
**          generates signal with variable duty and variable cycle (period).
*/         
/*!
**  @addtogroup PpgLdd1_module PpgLdd1 module documentation
**  @{
*/         

#ifndef __PpgLdd1_H
#define __PpgLdd1_H

/* MODULE PpgLdd1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "TPM_PDD.h"
#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif 

/* These constants are used to specify several distinctive modes of timing defined in the Period property,
   if the Runtime settings is set to "from list of values".
   These constants may be used as a parameter for SelectPeriod method, value is an index of selected user mode.
   The SP_[Timing] constant name denotes a value of period as it is specified by the user, value without spaces and "."
   is replaced by "_", e.g. for example 16_384ms for 16.384 ms. */
#ifndef __BWUserType_PpgLdd1_TClockList
#define __BWUserType_PpgLdd1_TClockList
  typedef enum {
    PpgLdd1_SP_50Hz        = 0U,       /* Constant for predefined period "50Hz" selection. */
    PpgLdd1_SP_6Hz         = 1U,       /* Constant for predefined period "6Hz" selection. */
    PpgLdd1_SP_12Hz        = 2U,       /* Constant for predefined period "12Hz" selection. */
    PpgLdd1_SP_15Hz        = 3U,       /* Constant for predefined period "15Hz" selection. */
    PpgLdd1_SP_18Hz        = 4U,       /* Constant for predefined period "18Hz" selection. */
    PpgLdd1_SP_21Hz        = 5U,       /* Constant for predefined period "21Hz" selection. */
    PpgLdd1_SP_24Hz        = 6U,       /* Constant for predefined period "24Hz" selection. */
    PpgLdd1_SP_27Hz        = 7U,       /* Constant for predefined period "27Hz" selection. */
    PpgLdd1_SP_30Hz        = 8U        /* Constant for predefined period "30Hz" selection. */
  } PpgLdd1_TClockList;                /* Type for list of predefined timings. */
#endif
#define PpgLdd1_PERIOD_TICKS 0xEA60UL  /* Initial period value in ticks of the timer. */
#define PpgLdd1_PERIOD_TICKS_0 0xEA60UL /* Period value in ticks of the timer in clock configuration 0. */
#define PpgLdd1_PERIOD_COUNT 0x09U     /* Count of predefined counter input frequencies */
/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define PpgLdd1_PRPH_BASE_ADDRESS  0x40039000U
  
/*! Device data structure pointer used when auto initialization property is enabled. This constant can be passed as a first parameter to all component's methods. */
#define PpgLdd1_DeviceData  ((LDD_TDeviceData *)PE_LDD_GetDeviceStructure(PE_LDD_COMPONENT_PpgLdd1_ID))

/* Methods configuration constants - generated for all enabled component's methods */
#define PpgLdd1_Init_METHOD_ENABLED    /*!< Init method of the component PpgLdd1 is enabled (generated) */
#define PpgLdd1_SelectPeriod_METHOD_ENABLED /*!< SelectPeriod method of the component PpgLdd1 is enabled (generated) */
#define PpgLdd1_SetRatio16_METHOD_ENABLED /*!< SetRatio16 method of the component PpgLdd1 is enabled (generated) */
#define PpgLdd1_SetDutyUS_METHOD_ENABLED /*!< SetDutyUS method of the component PpgLdd1 is enabled (generated) */
#define PpgLdd1_SetDutyMS_METHOD_ENABLED /*!< SetDutyMS method of the component PpgLdd1 is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */



/*
** ===================================================================
**     Method      :  PpgLdd1_Init (component PPG_LDD)
*/
/*!
**     @brief
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the
**         property ["Enable in init. code"] is set to "yes" value then
**         the device is also enabled (see the description of the
**         [Enable] method). In this case the [Enable] method is not
**         necessary and needn't to be generated. This method can be
**         called only once. Before the second call of Init the [Deinit]
**         must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* PpgLdd1_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  PpgLdd1_SelectPeriod (component PPG_LDD)
*/
/*!
**     @brief
**         Sets new period (setting prescaler a clock source, not an
**         external source such as pin). Up to 16 different values can
**         be predefined in designed-time. This method is enabled only
**         if ["Runtime setting type"] property is set to "from list of
**         values" and if a list of possible periods settings is
**         specified at design time. Each of these settings constitutes
**         a _/period/_ and Processor Expert assigns them a _/period
**         identifier/_. The prescaler corresponding to each mode are
**         calculated at design time. Modes can be switched at runtime
**         just by referring to a mode identifier. No run-time
**         calculations are performed, all the calculations are
**         performed at design time. The periods and periods
**         identifiers may be found in the include file *.h.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         Period          - New output period as enumeration
**                           value.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active clock configuration
**                           ERR_PARAM_VALUE - Invalid parameter Period
*/
/* ===================================================================*/
LDD_TError PpgLdd1_SelectPeriod(LDD_TDeviceData *DeviceDataPtr, PpgLdd1_TClockList Period);

/*
** ===================================================================
**     Method      :  PpgLdd1_SetRatio16 (component PPG_LDD)
*/
/*!
**     @brief
**         This method sets a new duty-cycle ratio. Ratio is expressed
**         as a 16-bit unsigned integer number. 0 - FFFF value is
**         proportional to ratio 0 - 100%. The method is available
**         only if it is not selected list of predefined values in
**         [Starting pulse width] property. 
**         Note: Calculated duty depends on the timer possibilities and
**         on the selected period.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         Ratio           - Ratio to set. 0 - 65535 value is
**                           proportional to ratio 0 - 100%
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError PpgLdd1_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Ratio);

/*
** ===================================================================
**     Method      :  PpgLdd1_SetDutyUS (component PPG_LDD)
*/
/*!
**     @brief
**         This method sets the new duty value of the output signal.
**         The duty is expressed in microseconds as a 16-bit unsigned
**         integer number. The method is available only if it is not
**         selected list of predefined values in [Starting pulse width]
**         property.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         Time            - Duty to set [in microseconds]
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_MATH - Overflow during evaluation
**                           ERR_PARAM_RANGE - Parameter out of range
*/
/* ===================================================================*/
LDD_TError PpgLdd1_SetDutyUS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time);

/*
** ===================================================================
**     Method      :  PpgLdd1_SetDutyMS (component PPG_LDD)
*/
/*!
**     @brief
**         This method sets the new duty value of the output signal.
**         The duty is expressed in milliseconds as a 16-bit unsigned
**         integer number. The method is available only if it is not
**         selected list of predefined values in [Starting pulse width]
**         property.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         Time            - Duty to set [in milliseconds]
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_MATH - Overflow during evaluation
**                           ERR_PARAM_RANGE - Parameter out of range
*/
/* ===================================================================*/
LDD_TError PpgLdd1_SetDutyMS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time);

/* END PpgLdd1. */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

#endif 
/* ifndef __PpgLdd1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
